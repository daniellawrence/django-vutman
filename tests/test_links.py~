from django.test import TestCase
from todo.models import Person, Links
from django.db import IntegrityError


class LinksTest(TestCase):
    def setUp(self):
        self.bob = Person.objects.create(title="bob", gender="M")
        self.sue = Person.objects.create(title="sue", gender="F")
        person_1 = Person.objects.create(title="link1")
        person_2 = Person.objects.create(title="link2")
        self.link = Links.objects.create(from_person=person_1,
                                         to_person=person_2)

    def test_link(self):
        bob_pass = self.bob.link_pass
        sue_pass = self.sue.link_pass

        link = Links.objects.create(from_person=self.bob, to_person=self.sue)
        self.assertEqual(link.from_person, self.bob)
        self.assertEqual(link.to_person, self.sue)
        self.assertEqual(link.state, "pending")

        self.assertEqual(link.to_person_valid, False)
        link.validate_link_to_person(sue_pass)
        self.assertEqual(link.to_person_valid, True)

        self.assertEqual(link.from_person_valid, False)
        link.validate_link_from_person(bob_pass)
        self.assertEqual(link.from_person_valid, True)

        self.assertEqual(link.state, "linked")

        with self.assertRaises(Exception):
            link.validate_link_from_person("BAD_PASS")
        with self.assertRaises(Exception):
            link.validate_link_to_person("BAD_PASS")

    def test_link_duplicate(self):
        link = Links.objects.create(from_person=self.bob, to_person=self.sue)
        self.assertEqual(link.from_person, self.bob)
        self.assertEqual(link.to_person, self.sue)
        with self.assertRaises(IntegrityError):
            Links.objects.create(from_person=self.bob, to_person=self.sue)

    def test_no_matches(self):
        self.assertEqual(self.link.matches(), [])
